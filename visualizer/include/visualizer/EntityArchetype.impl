#pragma once

#include <algorithm>
#include <new>

namespace Visualizer {

/**************************************************************************************************
 ********************************************* Public *********************************************
 **************************************************************************************************/

template <typename... Ts> requires NoCVRefs<Ts...>&& UniqueTypes<Ts...> EntityArchetype EntityArchetype::create()
{
    EntityArchetype archetype{};

    auto types{ getTypeIds<Ts...>() };

    archetype.m_types.insert(archetype.m_types.begin(), types.begin(), types.end());
    std::sort(archetype.m_types.begin(), archetype.m_types.end());

    archetype.m_componentInfos.reserve(sizeof...(Ts));
    ((archetype.m_componentInfos.push_back(generateEntityComponentData<Ts>())), ...);
    std::sort(archetype.m_componentInfos.begin(), archetype.m_componentInfos.end(),
        [](const EntityComponentData& lhs, const EntityComponentData& rhs) -> bool { return lhs.id < rhs.id; });

    archetype.m_components.reserve(sizeof...(Ts));
    for (std::size_t i = 0; i < sizeof...(Ts); ++i) {
        archetype.m_components.insert({ archetype.m_componentInfos[i].id, i });
    }

    archetype.m_identifier = generateArchetypeIdentifier(archetype.m_componentInfos);
    return archetype;
}

template <typename... Ts>
requires NoCVRefs<Ts...>&& UniqueTypes<Ts...> EntityArchetype EntityArchetype::with(const EntityArchetype& archetype)
{
    auto newArchetype = archetype;

    std::array<EntityComponentData, sizeof...(Ts)> typeInfos{ generateEntityComponentData<Ts>()... };

    for (auto typeInfo : typeInfos) {
        if (!newArchetype.hasComponent(typeInfo.id)) {
            newArchetype.m_types.push_back(typeInfo.id);
            newArchetype.m_componentInfos.push_back(typeInfo);
        }
    }

    std::sort(newArchetype.m_types.begin(), newArchetype.m_types.end());
    std::sort(newArchetype.m_componentInfos.begin(), newArchetype.m_componentInfos.end(),
        [](const EntityComponentData& lhs, const EntityComponentData& rhs) -> bool { return lhs.id < rhs.id; });

    newArchetype.m_components.reserve(newArchetype.size());
    for (std::size_t i = 0; i < newArchetype.size(); ++i) {
        newArchetype.m_components.insert_or_assign(newArchetype.m_componentInfos[i].id, i);
    }

    newArchetype.m_identifier = generateArchetypeIdentifier(newArchetype.m_componentInfos);
    return newArchetype;
}

template <typename... Ts>
requires NoCVRefs<Ts...>&& UniqueTypes<Ts...> EntityArchetype EntityArchetype::without(const EntityArchetype& archetype)
{
    auto newArchetype = archetype;
    auto types{ getTypeIds<Ts...>() };

    for (auto type : types) {
        auto typePos{ std::find(newArchetype.m_types.begin(), newArchetype.m_types.end(), type) };
        if (typePos == newArchetype.m_types.end()) {
            continue;
        }

        auto componentInfoPos{ std::find_if(newArchetype.m_componentInfos.begin(), newArchetype.m_componentInfos.end(),
            [type](const EntityComponentData& data) -> bool { return data.id == type; }) };

        newArchetype.m_types.erase(typePos);
        newArchetype.m_componentInfos.erase(componentInfoPos);
    }

    newArchetype.m_components.clear();
    newArchetype.m_components.reserve(newArchetype.size());
    for (std::size_t i = 0; i < newArchetype.size(); ++i) {
        newArchetype.m_components.insert_or_assign(newArchetype.m_componentInfos[i].id, i);
    }

    newArchetype.m_identifier = generateArchetypeIdentifier(newArchetype.m_componentInfos);
    return newArchetype;
}

template <typename T> requires NoCVRefs<T> bool EntityArchetype::hasComponent() const
{
    return hasComponent(getTypeId<T>());
}

template <typename T> requires NoCVRefs<T> std::optional<EntityComponentData> EntityArchetype::componentInfo() const
{
    return componentInfo(getTypeId<T>());
}

/**************************************************************************************************
 ******************************************** Private ********************************************
 **************************************************************************************************/

template <typename T> requires NoCVRefs<T> constexpr EntityComponentData EntityArchetype::generateEntityComponentData()
{
    return { getTypeId<T>(), sizeof(T), alignof(T), [](void* p) { new (p) T{}; },
        [](const void* src, void* dst) { *static_cast<T*>(dst) = *static_cast<const T*>(src); },
        [](void* src, void* dst) {
            if constexpr (std::is_trivially_copyable<T>::value) {
                *static_cast<T*>(dst) = *static_cast<const T*>(src);
            } else {
                *static_cast<T*>(dst) = std::move(*static_cast<const T*>(src));
            }
        },
        [](const void* src, void* dst) { new (static_cast<T*>(dst)) T{ *static_cast<const T*>(src) }; },
        [](void* src, void* dst) { new (static_cast<T*>(dst)) T{ std::move(*static_cast<T*>(src)) }; },
        [](const void* p) { static_cast<const T*>(p)->~T(); } };
}

/**************************************************************************************************
 ************************************** EntityComponentData **************************************
 **************************************************************************************************/

template <typename T> requires NoCVRefs<T> EntityComponentData EntityComponentData::create_desc()
{
    return { getTypeId<T>(), sizeof(T), alignof(T), [](void* p) { new (p) T{}; },
        [](const void* src, void* dst) { *static_cast<T*>(dst) = *static_cast<const T*>(src); },
        [](void* src, void* dst) {
            if constexpr (std::is_trivially_copyable<T>::value) {
                *static_cast<T*>(dst) = *static_cast<T*>(src);
            } else {
                *static_cast<T*>(dst) = std::move(*static_cast<T*>(src));
            }
        },
        [](const void* src, void* dst) { new (static_cast<T*>(dst)) T{ *static_cast<const T*>(src) }; },
        [](void* src, void* dst) { new (static_cast<T*>(dst)) T{ std::move(*static_cast<T*>(src)) }; },
        [](const void* p) { static_cast<const T*>(p)->~T(); } };
}

/**************************************************************************************************
 **************************************** EntityArchetype2 ****************************************
 **************************************************************************************************/

template <typename... Ts> requires NoCVRefs<Ts...>&& UniqueTypes<Ts...> EntityArchetype2 EntityArchetype2::with() const
{
    auto component_types{ getTypeIds<Ts...>() };
    return with(component_types);
}

template <typename... Ts>
requires NoCVRefs<Ts...>&& UniqueTypes<Ts...> EntityArchetype2 EntityArchetype2::without() const
{
    auto component_types{ getTypeIds<Ts...>() };
    return without(component_types);
}

}