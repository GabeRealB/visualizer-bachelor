#pragma once

namespace Visualizer {

template <typename T>
requires NoCVRefs<T>&& std::derived_from<T, System> bool SystemManager::hasSystem(std::string_view pass) const
{
    return hasSystem(pass, getTypeId<T>());
}

template <typename T>
requires NoCVRefs<T>&& std::derived_from<T, System> std::shared_ptr<T> SystemManager::getSystem(
    std::string_view pass) const
{
    return std::static_pointer_cast<T>(pass, getSystem(getTypeId<T>()));
}

template <typename T>
requires NoCVRefs<T>&& std::derived_from<T, System> void SystemManager::setSystem(
    std::string_view pass, std::shared_ptr<T> system)
{
    setSystem(pass, getTypeId<T>(), std::static_pointer_cast<System>(system));
}

template <typename T, typename... Args>
requires NoCVRefs<T>&& std::derived_from<T, System>&& std::constructible_from<T, Args...> std::shared_ptr<T>
SystemManager::addSystem(std::string_view pass, Args&&... args)
{
    auto system{ std::make_shared<T>(std::forward<Args>(args)...) };
    setSystem(pass, system);
    return system;
}

}